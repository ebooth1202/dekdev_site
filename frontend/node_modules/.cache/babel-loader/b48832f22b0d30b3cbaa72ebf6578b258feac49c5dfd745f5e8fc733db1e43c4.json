{"ast":null,"code":"// src/services/Analytics.js\n// Note: If using @tanstack/react-query instead of react-query,\n// update imports in components that use useQuery hooks\n\nclass AnalyticsService {\n  constructor() {\n    this.sessionId = this.generateSessionId();\n    this.startTime = Date.now();\n    this.currentPage = null;\n    this.pageStartTime = null;\n    this.isInitialized = false;\n    this.apiBaseUrl = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n  }\n\n  // Generate unique session ID\n  generateSessionId() {\n    return 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n  }\n\n  // Get device and browser information\n  getDeviceInfo() {\n    const userAgent = navigator.userAgent;\n    let browserName = 'Unknown';\n    let deviceType = 'Desktop';\n\n    // Detect browser\n    if (userAgent.includes('Chrome')) browserName = 'Chrome';else if (userAgent.includes('Firefox')) browserName = 'Firefox';else if (userAgent.includes('Safari')) browserName = 'Safari';else if (userAgent.includes('Edge')) browserName = 'Edge';\n\n    // Detect device type\n    if (/Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(userAgent)) {\n      deviceType = 'Mobile';\n    } else if (/iPad/i.test(userAgent)) {\n      deviceType = 'Tablet';\n    }\n    return {\n      browser: browserName,\n      deviceType: deviceType,\n      userAgent: userAgent,\n      screenWidth: window.screen.width,\n      screenHeight: window.screen.height,\n      viewportWidth: window.innerWidth,\n      viewportHeight: window.innerHeight,\n      timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n      language: navigator.language\n    };\n  }\n\n  // Get user's location (geo-IP will be handled by backend)\n  async getLocationInfo() {\n    try {\n      // This will be handled by the backend using the user's IP\n      // Frontend just sends the request, backend does geo-IP lookup\n      return {\n        timestamp: new Date().toISOString(),\n        timezoneOffset: new Date().getTimezoneOffset()\n      };\n    } catch (error) {\n      console.warn('Could not get location info:', error);\n      return null;\n    }\n  }\n\n  // Track page view\n  async trackPageView(pagePath = null) {\n    try {\n      // End previous page session if exists\n      if (this.currentPage && this.pageStartTime) {\n        await this.trackPageExit();\n      }\n\n      // Start new page session\n      const path = pagePath || window.location.pathname;\n      this.currentPage = path;\n      this.pageStartTime = Date.now();\n      const deviceInfo = this.getDeviceInfo();\n      const locationInfo = await this.getLocationInfo();\n      const trackingData = {\n        sessionId: this.sessionId,\n        pagePath: path,\n        timestamp: new Date().toISOString(),\n        referrer: document.referrer || null,\n        deviceInfo: deviceInfo,\n        locationInfo: locationInfo\n      };\n\n      // Send to backend\n      await this.sendAnalyticsData('page_view', trackingData);\n      console.log('Page view tracked:', path);\n    } catch (error) {\n      console.warn('Analytics tracking failed:', error);\n    }\n  }\n\n  // Track when user exits a page\n  async trackPageExit() {\n    if (!this.currentPage || !this.pageStartTime) return;\n    try {\n      const timeSpent = Math.round((Date.now() - this.pageStartTime) / 1000);\n      const exitData = {\n        sessionId: this.sessionId,\n        pagePath: this.currentPage,\n        timeSpentSeconds: timeSpent,\n        exitTimestamp: new Date().toISOString()\n      };\n      await this.sendAnalyticsData('page_exit', exitData);\n      console.log(`Time spent on ${this.currentPage}: ${timeSpent} seconds`);\n    } catch (error) {\n      console.warn('Page exit tracking failed:', error);\n    }\n  }\n\n  // Track custom events (clicks, interactions, etc.)\n  async trackEvent(eventName, eventData = {}) {\n    try {\n      const trackingData = {\n        sessionId: this.sessionId,\n        eventName: eventName,\n        eventData: eventData,\n        pagePath: this.currentPage,\n        timestamp: new Date().toISOString()\n      };\n      await this.sendAnalyticsData('event', trackingData);\n      console.log('Event tracked:', eventName, eventData);\n    } catch (error) {\n      console.warn('Event tracking failed:', error);\n    }\n  }\n\n  // Send data to backend\n  async sendAnalyticsData(type, data) {\n    try {\n      const response = await fetch(`${this.apiBaseUrl}/api/analytics/${type}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      });\n      if (!response.ok) {\n        throw new Error(`Analytics API error: ${response.status}`);\n      }\n    } catch (error) {\n      // Fail silently in production, log in development\n      if (process.env.NODE_ENV === 'development') {\n        console.warn('Analytics API call failed:', error);\n      }\n\n      // Store locally as fallback (could implement offline queue)\n      this.storeOfflineData(type, data);\n    }\n  }\n\n  // Store data locally when API is unavailable\n  storeOfflineData(type, data) {\n    try {\n      const offlineData = JSON.parse(localStorage.getItem('offline_analytics') || '[]');\n      offlineData.push({\n        type: type,\n        data: data,\n        storedAt: new Date().toISOString()\n      });\n\n      // Keep only last 100 entries\n      if (offlineData.length > 100) {\n        offlineData.splice(0, offlineData.length - 100);\n      }\n      localStorage.setItem('offline_analytics', JSON.stringify(offlineData));\n    } catch (error) {\n      console.warn('Could not store offline analytics data:', error);\n    }\n  }\n\n  // Initialize analytics\n  init() {\n    if (this.isInitialized) return;\n\n    // Track page visibility changes\n    document.addEventListener('visibilitychange', () => {\n      if (document.hidden) {\n        this.trackPageExit();\n      } else {\n        this.trackPageView();\n      }\n    });\n\n    // Track page unload\n    window.addEventListener('beforeunload', () => {\n      this.trackPageExit();\n    });\n\n    // Track clicks on external links\n    document.addEventListener('click', event => {\n      const link = event.target.closest('a');\n      if (link && link.href.startsWith('http') && !link.href.includes(window.location.host)) {\n        this.trackEvent('external_link_click', {\n          url: link.href,\n          text: link.textContent.trim()\n        });\n      }\n    });\n    this.isInitialized = true;\n    console.log('Analytics initialized with session:', this.sessionId);\n  }\n}\n\n// Create singleton instance\nconst Analytics = new AnalyticsService();\n\n// Auto-initialize\nAnalytics.init();\nexport default Analytics;","map":{"version":3,"names":["AnalyticsService","constructor","sessionId","generateSessionId","startTime","Date","now","currentPage","pageStartTime","isInitialized","apiBaseUrl","process","env","REACT_APP_API_URL","Math","random","toString","substr","getDeviceInfo","userAgent","navigator","browserName","deviceType","includes","test","browser","screenWidth","window","screen","width","screenHeight","height","viewportWidth","innerWidth","viewportHeight","innerHeight","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","language","getLocationInfo","timestamp","toISOString","timezoneOffset","getTimezoneOffset","error","console","warn","trackPageView","pagePath","trackPageExit","path","location","pathname","deviceInfo","locationInfo","trackingData","referrer","document","sendAnalyticsData","log","timeSpent","round","exitData","timeSpentSeconds","exitTimestamp","trackEvent","eventName","eventData","type","data","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","NODE_ENV","storeOfflineData","offlineData","parse","localStorage","getItem","push","storedAt","length","splice","setItem","init","addEventListener","hidden","event","link","target","closest","href","startsWith","host","url","text","textContent","trim","Analytics"],"sources":["/Users/Ebooth/dekdev_site/frontend/src/services/Analytics.js"],"sourcesContent":["// src/services/Analytics.js\n// Note: If using @tanstack/react-query instead of react-query,\n// update imports in components that use useQuery hooks\n\nclass AnalyticsService {\n  constructor() {\n    this.sessionId = this.generateSessionId();\n    this.startTime = Date.now();\n    this.currentPage = null;\n    this.pageStartTime = null;\n    this.isInitialized = false;\n    this.apiBaseUrl = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n  }\n\n  // Generate unique session ID\n  generateSessionId() {\n    return 'session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);\n  }\n\n  // Get device and browser information\n  getDeviceInfo() {\n    const userAgent = navigator.userAgent;\n    let browserName = 'Unknown';\n    let deviceType = 'Desktop';\n\n    // Detect browser\n    if (userAgent.includes('Chrome')) browserName = 'Chrome';\n    else if (userAgent.includes('Firefox')) browserName = 'Firefox';\n    else if (userAgent.includes('Safari')) browserName = 'Safari';\n    else if (userAgent.includes('Edge')) browserName = 'Edge';\n\n    // Detect device type\n    if (/Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(userAgent)) {\n      deviceType = 'Mobile';\n    } else if (/iPad/i.test(userAgent)) {\n      deviceType = 'Tablet';\n    }\n\n    return {\n      browser: browserName,\n      deviceType: deviceType,\n      userAgent: userAgent,\n      screenWidth: window.screen.width,\n      screenHeight: window.screen.height,\n      viewportWidth: window.innerWidth,\n      viewportHeight: window.innerHeight,\n      timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n      language: navigator.language\n    };\n  }\n\n  // Get user's location (geo-IP will be handled by backend)\n  async getLocationInfo() {\n    try {\n      // This will be handled by the backend using the user's IP\n      // Frontend just sends the request, backend does geo-IP lookup\n      return {\n        timestamp: new Date().toISOString(),\n        timezoneOffset: new Date().getTimezoneOffset()\n      };\n    } catch (error) {\n      console.warn('Could not get location info:', error);\n      return null;\n    }\n  }\n\n  // Track page view\n  async trackPageView(pagePath = null) {\n    try {\n      // End previous page session if exists\n      if (this.currentPage && this.pageStartTime) {\n        await this.trackPageExit();\n      }\n\n      // Start new page session\n      const path = pagePath || window.location.pathname;\n      this.currentPage = path;\n      this.pageStartTime = Date.now();\n\n      const deviceInfo = this.getDeviceInfo();\n      const locationInfo = await this.getLocationInfo();\n\n      const trackingData = {\n        sessionId: this.sessionId,\n        pagePath: path,\n        timestamp: new Date().toISOString(),\n        referrer: document.referrer || null,\n        deviceInfo: deviceInfo,\n        locationInfo: locationInfo\n      };\n\n      // Send to backend\n      await this.sendAnalyticsData('page_view', trackingData);\n\n      console.log('Page view tracked:', path);\n    } catch (error) {\n      console.warn('Analytics tracking failed:', error);\n    }\n  }\n\n  // Track when user exits a page\n  async trackPageExit() {\n    if (!this.currentPage || !this.pageStartTime) return;\n\n    try {\n      const timeSpent = Math.round((Date.now() - this.pageStartTime) / 1000);\n\n      const exitData = {\n        sessionId: this.sessionId,\n        pagePath: this.currentPage,\n        timeSpentSeconds: timeSpent,\n        exitTimestamp: new Date().toISOString()\n      };\n\n      await this.sendAnalyticsData('page_exit', exitData);\n      console.log(`Time spent on ${this.currentPage}: ${timeSpent} seconds`);\n    } catch (error) {\n      console.warn('Page exit tracking failed:', error);\n    }\n  }\n\n  // Track custom events (clicks, interactions, etc.)\n  async trackEvent(eventName, eventData = {}) {\n    try {\n      const trackingData = {\n        sessionId: this.sessionId,\n        eventName: eventName,\n        eventData: eventData,\n        pagePath: this.currentPage,\n        timestamp: new Date().toISOString()\n      };\n\n      await this.sendAnalyticsData('event', trackingData);\n      console.log('Event tracked:', eventName, eventData);\n    } catch (error) {\n      console.warn('Event tracking failed:', error);\n    }\n  }\n\n  // Send data to backend\n  async sendAnalyticsData(type, data) {\n    try {\n      const response = await fetch(`${this.apiBaseUrl}/api/analytics/${type}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data)\n      });\n\n      if (!response.ok) {\n        throw new Error(`Analytics API error: ${response.status}`);\n      }\n    } catch (error) {\n      // Fail silently in production, log in development\n      if (process.env.NODE_ENV === 'development') {\n        console.warn('Analytics API call failed:', error);\n      }\n\n      // Store locally as fallback (could implement offline queue)\n      this.storeOfflineData(type, data);\n    }\n  }\n\n  // Store data locally when API is unavailable\n  storeOfflineData(type, data) {\n    try {\n      const offlineData = JSON.parse(localStorage.getItem('offline_analytics') || '[]');\n      offlineData.push({\n        type: type,\n        data: data,\n        storedAt: new Date().toISOString()\n      });\n\n      // Keep only last 100 entries\n      if (offlineData.length > 100) {\n        offlineData.splice(0, offlineData.length - 100);\n      }\n\n      localStorage.setItem('offline_analytics', JSON.stringify(offlineData));\n    } catch (error) {\n      console.warn('Could not store offline analytics data:', error);\n    }\n  }\n\n  // Initialize analytics\n  init() {\n    if (this.isInitialized) return;\n\n    // Track page visibility changes\n    document.addEventListener('visibilitychange', () => {\n      if (document.hidden) {\n        this.trackPageExit();\n      } else {\n        this.trackPageView();\n      }\n    });\n\n    // Track page unload\n    window.addEventListener('beforeunload', () => {\n      this.trackPageExit();\n    });\n\n    // Track clicks on external links\n    document.addEventListener('click', (event) => {\n      const link = event.target.closest('a');\n      if (link && link.href.startsWith('http') && !link.href.includes(window.location.host)) {\n        this.trackEvent('external_link_click', {\n          url: link.href,\n          text: link.textContent.trim()\n        });\n      }\n    });\n\n    this.isInitialized = true;\n    console.log('Analytics initialized with session:', this.sessionId);\n  }\n}\n\n// Create singleton instance\nconst Analytics = new AnalyticsService();\n\n// Auto-initialize\nAnalytics.init();\n\nexport default Analytics;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}